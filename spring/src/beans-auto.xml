<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 自动装配
        只声明bean,把bean之间的关系交给IOC容器来完成，

        byType: 根据类型进行自动装配，要求IOC容器中只有一个类型对应的bean，若有多个则无法完成自动装配
        byName: 若属性名和某一个bean的id名一致，即可完成自动装配，若没有id一致的，则无法完成自动装配

        使用xml配置时，使用自动装配的不多；但基于 注解 配置时，使用自动装配的比较多
    -->
    <bean id="dao" class="com.java.ref.bean.Dao">
        <property name="dataSource" value="Druid"/>
    </bean>

    <!--
    默认情况下：bean都单例的
    若需要多个实例进，可通过 scope 指定，
        scope="prototype"   原型的，每次调用ctx.getBean("id_name") 时都会返回一个新的bean对象，每次都在调用此方法时才生成bean对象
        scope="singleton"   单例的，每次调用ctx.getBean("id_name") 时都会返回同一个的bean对象，且在 IOC 容器初始化时即创建 bean 的实例. 默认值
    -->
    <bean id="dao2" class="com.java.ref.bean.Dao" scope="prototype"></bean>

    <bean id="service" class="com.java.ref.bean.Service" autowire="byName"></bean>

<!--    <bean id="web" class="com.java.ref.bean.Web" autowire="byType"></bean>-->

    <!-- 导入外部资源文件 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialPoolSize" value="${jdbc.initPoolSize}"/>
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>
    </bean>

    <!-- bean的生命周期方法 -->
    <bean id="person1" class="com.java.ref.bean.Person" p:name="范仲淹"
          init-method="init"
          destroy-method="destroy">
    </bean>
    <!-- spEL spring表达式，动态为属性赋值 -->
    <bean id="person2" class="com.java.ref.bean.Person" p:name="商鞅" p:fatherName="#{person1.name}">
    </bean>

    <!-- 配置bean后置处理器，对所有的bean生效，全局生效
    不需要配置id属性，IOC容器会识别到它是一个 bean 后置处理器, 并调用其方法  -->
<!--    <bean class="com.java.ref.bean.MyBeanPostProcess"></bean>-->

    <!-- 通过工厂方法的方式来配置bean -->
    <bean id="dateFormat" class="java.text.DateFormat" factory-method="getDateInstance">
        <!-- 可通过constructor-arg标签为静态工厂方法指定参数 -->
        <constructor-arg value="2"/>
    </bean>
    <!-- 实例工厂方法
        1. 先创建工厂对象
        2. 调用工厂的非静态方法返回实例
    -->
    <bean id="simpleDateFormat" class="java.text.SimpleDateFormat">
        <constructor-arg value="yyyy-MM-dd hh:mm:ss"/>
    </bean>
    <bean id="datetime" factory-bean="simpleDateFormat" factory-method="parse">
        <constructor-arg value="2020-02-23 06:06:06"/>
    </bean>

    <!-- 通过FactoryBean 的方式创建bean的实例 -->
    <bean id="user51" class="com.java.ref.bean.UserBean"></bean>
</beans>