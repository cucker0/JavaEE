<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.java.dao.EmployeeDynamicSqlMapper">
    <!-- 会涉及使用OGNL表达式 -->

    <!-- List<Employee> getEmployeesByConditionIf(Employee employee); -->
    <select id="getEmployeesByConditionIf" resultType="com.java.bean.Employee">
        <!-- 这种写法有缺点，WHERE后的第一个查询条件为空是，将报语法错误，因为会导致SQl语句WHERE后多了一个AND或OR
         一种憋足的方法是：在WHERE后加一个恒成立条件，如 WHERE 1 = 1
         -->
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        WHERE
        <if test="id != null">
            id = #{id}
        </if>
        <if test="lastName != null">
            AND last_name LIKE #{lastName}
        </if>
        <!-- 会自动传入参数的gender属性转数字，原来字符串 -->
        <if test="gender == 0 or gender == 1">
            AND gender = #{gender}
        </if>
        <if test="email != null and email.trim() != ''">
            AND email = #{email}
        </if>
    </select>

    <!-- List<Employee> getEmployeesByConditionWhere(Employee employee); -->
    <select id="getEmployeesByConditionWhere" resultType="com.java.bean.Employee">
        <!-- <where> 只能处理前面的AND、OR关键字 -->
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="lastName != null">
                AND last_name LIKE #{lastName}
            </if>
            <if test="gender == 0 or gender == 1">
                AND gender = #{gender}
            </if>
            <if test="email != null and email.trim() != ''">
                AND email = #{email}
            </if>
        </where>
    </select>

    <!-- List<Employee> getEmployeesByConditionWhere2(Employee employee); -->
    <select id="getEmployeesByConditionWhere2" resultType="com.java.bean.Employee">
        <!-- <where> 只能处理前面的AND、OR关键字，而无法处理后面的AND、OR关键字 -->
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        <where>
            <if test="id != null">
                id = #{id} AND
            </if>
            <if test="lastName != null">
                last_name LIKE #{lastName} AND
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender} AND
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </where>
    </select>

    <!-- List<Employee> getEpmloyeesByConditionTrim(Employee employee); -->
    <select id="getEpmloyeesByConditionTrim" resultType="com.java.bean.Employee">
        <!--
        <trim>自定义字符串的截取规则
            prefix="": 前缀，trim标签中的字符串拼接后，最后在其基础上加上前缀
            prefixOverrides="": 前缀覆盖，去掉整个trim接串后多余的前缀
            suffix="": 后缀，trim标签中的字符串拼接后，最后在其基础上加上后缀
            suffixOverrides="": 后缀覆盖，去掉整个trim接串后多余的后缀
         -->
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        <trim prefix="WHERE" suffixOverrides="and">
            <if test="id != null">
                id = #{id} AND
            </if>
            <if test="lastName != null">
                last_name LIKE #{lastName} AND
            </if>
            <if test="gender == 0 or gender == 1">
                gender = #{gender} AND
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </trim>
    </select>

    <!-- List<Employee> getEmployeesByConditionChoose(Employee employee); -->
    <select id="getEmployeesByConditionChoose" resultType="com.java.bean.Employee">
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        <where>
            <!--
            <choose>分支查询：从哪到下，用第一成立的条件去查询，最多会进入一个查询条件，或者都不成立

             -->
            <choose>
                <when test="id != null">
                    id = #{id}
                </when>
                <when test="lastName != null">
                    last_name = #{lastName}
                </when>
                <when test="email != null">
                    email = #{email}
                </when>
                <otherwise>
                    gender = '0'
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- void updateEmployeeById(Employee employee); -->
    <update id="updateEmployeeById">
        UPDATE t_employee_x
        <set>
            <if test="lastName != null">
                last_name = #{lastName},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- void updateEmployeeById2(Employee employee); -->
    <update id="updateEmployeeById2">
        <!--
         <trim> 实现set更新
         -->
        UPDATE t_employee_x
        <trim prefix="SET" suffixOverrides=",">
            <if test="lastName != null">
                last_name = #{lastName},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </trim>
        WHERE id = #{id}
    </update>

    <!-- List<Employee> getEmployeesByIds(@Param("ids") List<Long> ids); -->
    <select id="getEmployeesByIds" resultType="com.java.bean.Employee">
        SELECT id, last_name lastName, gender, email FROM t_employee_x WHERE id IN (
            <foreach collection="ids" item="item_id" separator=",">
                #{item_id}
            </foreach>
        )
    </select>

    <!-- List<Employee> getEmployeesByIds2(@Param("ids") List<Long> ids); -->
    <select id="getEmployeesByIds2" resultType="com.java.bean.Employee">
        SELECT id, last_name lastName, gender, email FROM t_employee_x WHERE id IN
        <!--
        <foreach> 遍历集合
            collection: 要遍历的集合。要求必须制定
                list类型的参数会特殊处理封装在map中，
                map的key就叫list
            item: 遍历出来的元素赋值给哪个变量
            index: 遍历list的时候是index就是索引，item就是当前值
                遍历map的时候index表示的就是map的key，item就是map的值
            open: 遍历出所有结果拼接一个开始的字符
            close: 遍历出所有结果拼接一个结束的字符
            separator: 每个元素之间的分隔符

            #{item指定的变量名} 当前遍历出的元素
         -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
            #{item_id}
        </foreach>
    </select>

    <!-- mysql批量插入，方式1
    INSERT INTO t_employee_x (last_name, gender, email, dep_id) VALUES
    ('last_name', 'gender', 'email', 'dep_id'),
    ('last_name', 'gender', 'email', 'dep_id'),
    ('last_name', 'gender', 'email', 'dep_id');
     -->
    <!-- Boolean batchInsertEmployees(@Param("employeeList") List<Employee> employeeList); -->
    <insert id="batchInsertEmployees">
        INSERT INTO t_employee_x (last_name, gender, email, dep_id) VALUES
        <foreach collection="employeeList" item="emp" separator="," close=";">
            (#{emp.lastName}, #{emp.gender}, #{emp.email}, #{emp.department.id})
        </foreach>
    </insert>

    <!-- mysql批量插入，方式2
    INSERT INTO t_employee_x (last_name, gender, email, dep_id) VALUES ('last_name', 'gender', 'email', 'dep_id');
    INSERT INTO t_employee_x (last_name, gender, email, dep_id) VALUES ('last_name', 'gender', 'email', 'dep_id');
    ... ...

     注意 jdbc中要开启支持多;sql语句，mysql.url= 中添加allowMultiQueries=true参数
     mysql.url=jdbc:mysql://127.0.0.1:3306/mybatis?allowMultiQueries=true
     -->
    <!-- Boolean batchInsertEmployees2(@Param("employeeList") List<Employee> employeeList); -->
    <insert id="batchInsertEmployees2">
        <foreach collection="employeeList" item="emp">
            INSERT INTO t_employee_x (last_name, gender, email, dep_id) VALUES (#{emp.lastName}, #{emp.gender}, #{emp.email}, #{emp.department.id});
        </foreach>
    </insert>

    <!-- oracle批量插入方式1：
    BEGIN
    INSERT INTO t_emp (id, last_name, gender, email) VALUES
        (t_emp_id.NEXTVAL, '俞敏洪', '1', 'yumh@xindongf.com');
    INSERT INTO t_emp (id, last_name, gender, email) VALUES
        (t_emp_id.NEXTVAL, '刘胡兰', '0', 'liufl@china.cn');
    INSERT INTO t_emp (id, last_name, gender, email) VALUES
        (t_emp_id.NEXTVAL, '童第周', '1', 'tongdz@kx.com');
    END;
     -->
    <!-- Boolean oracleBatchInsertEmployees(@Param("employeeList") List<Employee> employeeList); -->
    <insert id="oracleBatchInsertEmployees">
        BEGIN
            <foreach collection="employeeList" item="emp">
            INSERT INTO t_emp (id, last_name, gender, email) VALUES
                (t_emp_id.NEXTVAL, #{emp.lastName}, #{emp.gender}, #{emp.email});
            </foreach>
        END;
    </insert>

    <!-- oracle批量插入方式2：
    INSERT INTO t_emp (id, last_name, gender, email)
    SELECT t_emp_id.NEXTVAL, lastName, gender, email
    FROM
        (
            SELECT 'suzhen' lastName, '0' gender, 'sz@kk.com' email FROM DUAL
            UNION
            SELECT 'dally' lastName, '0' gender, 'dally@kk.com' email FROM DUAL
        )

    -->
    <!-- Boolean oracleBatchInsertEmployees2(@Param("employeeList") List<Employee> employeeList); -->
    <insert  id="oracleBatchInsertEmployees2">
        INSERT INTO t_emp (ID, last_name, gender, email)
        SELECT t_emp_id.NEXTVAL, lastName, gender, email
        FROM
            (
            <foreach collection="employeeList" item="emp" separator="UNION">
                SELECT #{emp.lastName} lastName, #{emp.gender} gender, #{emp.email} email FROM dual
            </foreach>
            )
    </insert>


    <!-- mybatis两个默认的内置参数
    _parameter: 代表整个从dao方法里传过来的参数
        传单个参数: _parameter 就是这个参数
        传多个参数: 参数会被封装为一个map，_parameter指向这个map
    _databaseId: 当前使用JDBC数据库产商别名
        要求必须配置databaseIdProvider
    -->
    <!-- List<Employee> getEmployeesTestInnerParamter(Employee employee); -->
    <select id="getEmployeesTestInnerParamter" resultType="com.java.bean.Employee">
        <if test="_databaseId == 'mysql'">
            SELECT id, last_name lastName, gender, email FROM t_employee_x
        </if>
        <if test="_databaseId == 'oracle'">
            SELECT id, last_name lastName, gender, email FROM t_emp
        </if>
        <!-- 一个参数时，#{_parameter.lastName} 与#{lastName} 效果是一样的 -->
        WHERE last_name like #{_parameter.lastName}
    </select>

    <!-- List<Employee> getEmployeesTestBind(Employee employee); -->
    <select id="getEmployeesTestBind" resultType="com.java.bean.Employee" databaseId="mysql">
        <!--
        <bind>: 可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值
        -->
        <bind name="_lastName" value="'%' + lastName + '%'"/>
        SELECT id, last_name lastName, gender, email FROM t_employee_x
        WHERE last_name LIKE #{_lastName}
    </select>
</mapper>