<?xml version="1.0" encoding="UTF-8"?>

<!-- sql映射文件
 Mapper XML Files
 -->

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
namespace（命名空间）: 使用对应的dao接口的全称接口名
id: 使用接口中的方法名
resultType: 返回的类型，要去写全称类名(FQCN: Fully Qualified Class Name)

这样 sql语句就 与 dao接口EmployeeMapper中 Employee getEmployeeById(Long id) 绑定
databaseId: 数据库厂商别名

句尾的;可以写，也可省略不写
-->
<mapper namespace="com.java.dao.EmployeeMapper">
    <select id="getEmployeeById" resultType="com.java.bean.Employee">
        SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id = #{id};
    </select>

    <!--
    获取mysql自增主键的值
     useGeneratedKeys="true" 表示开启获取自增AUTO_INCREMENT 的值，
     keyProperty="keyName" 封装给Bean对象的属性，不是方法的返回值（addEmployee）。默认不是会封此属性的
    -->
    <!-- void addEmployee(Employee employee); -->
    <insert id="addEmployee" parameterType="com.java.bean.Employee" databaseId="mysql"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_employee(last_name, gender, email) VALUES
        (#{lastName}, #{gender}, #{email})
    </insert>


    <!--
     Oracle不支持自增，Oracle使用序列来模拟自增
     每次插入主键数据时，都去序列中拿新的值，如何获取该值呢


     -->
    <insert id="addEmployee" parameterType="com.java.bean.Employee" databaseId="oracle">
        <!--
        查询主键值的子查询sql
        order="BEFORE" 表示此sql语句在主sql语句之前执行
        keyProperty="keyName" 封装给Bean对象的属性
        #{email, jdbcType=NULL} ：指定当email值为null时，jdbcType的类型
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Long">
            SELECT t_emp_id.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO t_emp(id, last_name, gender, email) VALUES
        (#{id}, #{lastName}, #{gender}, #{email})
        <!-- (#{id}, #{lastName}, #{gender}, #{email, jdbcType=NULL}) -->
    </insert>

    <!-- void updateEmployee(Employee employee); -->
    <update id="updateEmployee">
        UPDATE t_employee SET last_name = #{lastName}, gender = #{gender}, email = #{email} WHERE id = #{id}
    </update>
    
    <!-- void deleteEmployeeById(Long id); -->
    <delete id="deleteEmployeeById">
        DELETE FROM t_employee WHERE id = #{id}
    </delete>

    <!-- Employee getEmployeeByIdAndLastName(Long id, String lastName); -->
    <select id="getEmployeeByIdAndLastName" resultType="com.java.bean.Employee" databaseId="mysql">
         SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id=#{param1} AND last_name=#{param2}
        <!-- SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id=#{arg0} AND last_name=#{arg1} -->
        <!-- 当设置了 useActualParamName=false 时，(该参数默认为true)
            可用 #{0} ... #{n} 取参数, 这时#{arg0}等失效，但#{param1}等仍然生效
         -->
        <!-- SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id=#{0} AND last_name=#{1} -->
    </select>

    <!-- Employee getEmployeeByIdAndLastName2(@Param("id") Long id, @Param("lastName") String lastName); -->
    <select id="getEmployeeByIdAndLastName2" resultType="com.java.bean.Employee">
        SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id=#{id} AND last_name=#{lastName}
    </select>

    <!-- Employee getEmployeeMap(Map<String, Object> map); -->
    <select id="getEmployeeMap" resultType="com.java.bean.Employee">
        <!-- 取 表名 时，使用${key名}，因为它是sql语句，不是字符串 -->
        SELECT id, last_name AS lastName, gender, email FROM ${tableName} WHERE id=#{id} AND last_name=#{lastName}

        <!-- 't_employee' WHERE id=1 AND last_name='大山'
        SELECT id, last_name AS lastName, gender, email FROM #{tableName} WHERE id=#{id} AND last_name=#{lastName}

        // 传一个map参数：{"id":1, "lastName":"大山", "table": "t_employee"}，最后SQL语句如下，将报语法错误
        SELECT id, last_name AS lastName, gender, email FROM 't_employee' WHERE id=1 AND last_name='大山';
        -->
    </select>

    <!-- List<Employee> getAllEmployees();
     如果返回的是一个集合，则resultType返回类型写集合中元素的类型
     -->
    <select id="getAllEmployees" resultType="com.java.bean.Employee">
        SELECT id, last_name AS lastName, gender, email FROM t_employee
    </select>

    <!-- Map<String, Object> getEmployeeReturnMap(Long id);
    mybatis把常用的基本类型设置的resultType的别名，如java.util.Map别名为map

    -->
    <select id="getEmployeeReturnMap" resultType="map">
        SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE id=#{id}
    </select>

    <!-- Map<Long, Employee> getEmployeeByLastNameLikeReturnMap(String lastNameKey); -->
    <select id="getEmployeeByLastNameLikeReturnMap" resultType="com.java.bean.Employee">
        SELECT id, last_name AS lastName, gender, email FROM t_employee WHERE last_name like #{lastNameKey}
    </select>
</mapper>